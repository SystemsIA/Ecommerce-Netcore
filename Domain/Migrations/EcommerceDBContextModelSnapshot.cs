// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Domain.Migrations
{
    [DbContext(typeof(EcommerceDBContext))]
    partial class EcommerceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Models.Categorias", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_categorias");

                    b.HasIndex(new[] { "Nombre" }, "IX_categorias_nombre")
                        .IsUnique()
                        .HasDatabaseName("ix_categorias_nombre");

                    b.HasIndex(new[] { "Nombre" }, "idx_nombre_categoria")
                        .HasDatabaseName("ix_categorias_nombre1");

                    b.HasIndex(new[] { "ParentId" }, "idx_parent_id_categorias")
                        .HasDatabaseName("ix_categorias_parent_id");

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("Domain.Models.Imagenes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("NombreImagen")
                        .HasColumnType("varchar(300)")
                        .HasColumnName("nombre_imagen");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    b.HasKey("Id")
                        .HasName("pk_imagenes");

                    b.HasIndex("ProductoId")
                        .HasDatabaseName("ix_imagenes_producto_id");

                    b.ToTable("imagenes");
                });

            modelBuilder.Entity("Domain.Models.Pedidos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric")
                        .HasColumnName("precio");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_pedidos");

                    b.HasIndex("ProductoId")
                        .HasDatabaseName("ix_pedidos_producto_id");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_pedidos_usuario_id");

                    b.ToTable("pedidos");
                });

            modelBuilder.Entity("Domain.Models.ProductoCategorias", b =>
                {
                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("categoria_id");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("ix_producto_categorias_categoria_id");

                    b.HasIndex("ProductoId")
                        .HasDatabaseName("ix_producto_categorias_producto_id");

                    b.ToTable("producto_categorias");
                });

            modelBuilder.Entity("Domain.Models.Productos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<int?>("Cantidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cantidad")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<decimal>("DescuentoPrecio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasColumnName("descuento_precio")
                        .HasDefaultValueSql("0.0");

                    b.Property<bool>("Disponible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("disponible")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ImagenPrincipal")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imagen_principal");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("PrecioNormal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasColumnName("precio_normal")
                        .HasDefaultValueSql("0.0");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sku");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_productos");

                    b.HasIndex(new[] { "Sku" }, "IX_productos_sku")
                        .IsUnique()
                        .HasDatabaseName("ix_productos_sku");

                    b.HasIndex(new[] { "PrecioNormal" }, "idx_precio_producto")
                        .HasDatabaseName("ix_productos_precio_normal");

                    b.HasIndex(new[] { "Sku" }, "idx_sku_producto")
                        .HasDatabaseName("ix_productos_sku1");

                    b.ToTable("productos");
                });

            modelBuilder.Entity("Domain.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex(new[] { "Nombre" }, "IX_roles_nombre")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_nombre");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Domain.Models.Transacciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("FechaTransaccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_transaccion")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric")
                        .HasColumnName("monto");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("numero_tarjeta");

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("pedido_id");

                    b.HasKey("Id")
                        .HasName("pk_transacciones");

                    b.HasIndex(new[] { "Codigo" }, "IX_transacciones_codigo")
                        .IsUnique()
                        .HasDatabaseName("ix_transacciones_codigo");

                    b.HasIndex(new[] { "PedidoId" }, "IX_transacciones_pedido_id")
                        .IsUnique()
                        .HasDatabaseName("ix_transacciones_pedido_id");

                    b.ToTable("transacciones");
                });

            modelBuilder.Entity("Domain.Models.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("apellido");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("registered_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Thumbnail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("thumbnail")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_usuarios");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_usuarios_role_id");

                    b.HasIndex(new[] { "Email" }, "IX_usuarios_email")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_email");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Domain.Models.Imagenes", b =>
                {
                    b.HasOne("Domain.Models.Productos", "Producto")
                        .WithMany("Imagenes")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("fk_imagenes_productos_producto_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Domain.Models.Pedidos", b =>
                {
                    b.HasOne("Domain.Models.Productos", "Producto")
                        .WithMany("Pedidos")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("fk_pedidos_productos_producto_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Usuarios", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_pedidos_usuarios_usuario_id")
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Models.ProductoCategorias", b =>
                {
                    b.HasOne("Domain.Models.Categorias", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("fk_producto_categorias_categorias_categoria_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Productos", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("fk_producto_categorias_productos_producto_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Domain.Models.Transacciones", b =>
                {
                    b.HasOne("Domain.Models.Pedidos", "Pedido")
                        .WithOne("Transacciones")
                        .HasForeignKey("Domain.Models.Transacciones", "PedidoId")
                        .HasConstraintName("fk_transacciones_pedidos_pedido_id")
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Domain.Models.Usuarios", b =>
                {
                    b.HasOne("Domain.Models.Roles", "Role")
                        .WithMany("Usuarios")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_usuarios_roles_role_id")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.Pedidos", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Domain.Models.Productos", b =>
                {
                    b.Navigation("Imagenes");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Domain.Models.Roles", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Domain.Models.Usuarios", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
